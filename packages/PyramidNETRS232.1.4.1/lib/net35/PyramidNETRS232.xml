<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PyramidNETRS232</name>
    </assembly>
    <members>
        <member name="T:PyramidNETRS232.PyramidAcceptor">
            <summary>
                The main class that does the actual "talking" the acceptor. In the context of documentation,
                this object what is referred to as the master and the acceptor is the slave device.
            </summary>
        </member>
        <member name="F:PyramidNETRS232.PyramidAcceptor._lastEnablePattern">
            <summary>
                Stores the prior enable/disable pattern, used with the Enable/Disable calls
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.#ctor(PyramidNETRS232.RS232Config)">
            <summary>
                Creates a new PyramidAcceptor using the specified configuration
            </summary>
            <param name="config">Operating RS-232 parameters</param>
        </member>
        <member name="P:PyramidNETRS232.PyramidAcceptor.PreviousState">
            <summary>
                Slave's last state
            </summary>
        </member>
        <member name="P:PyramidNETRS232.PyramidAcceptor.PreviousEvents">
            <summary>
                Slave's last events
            </summary>
        </member>
        <member name="P:PyramidNETRS232.PyramidAcceptor.IsRunning">
            <summary>
                Returns true if the communication thread is running normally
            </summary>
        </member>
        <member name="P:PyramidNETRS232.PyramidAcceptor.Config">
            <summary>
                Gets or sets the RS232 Configuration
            </summary>
        </member>
        <member name="P:PyramidNETRS232.PyramidAcceptor.IsPaused">
            <summary>
                Gets the current pause state. If the acceptor
                is running and at least 1 bill is enabled, the acceptor
                is not paused. Otherwise, the acceptor is considered
                paused.
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.Dispose">
            <summary>
                Releases comm port and related managed resources.
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.GetAvailablePorts">
            <summary>
                Returns a list of all available ports
            </summary>
            <returns></returns>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.Close">
            <summary>
                Stop talking to the slave and release the underlying comm port.
                <remarks>Do not use this to disable the bill acceptor: use PauseAcceptance()</remarks>
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.PauseAcceptance">
            <summary>
                Disables the bill acceptor within the time period defined by the poll rate.
                The poll rate (RS232Config.PollRate, default 50 ms) is the maximum time
                between poll packets from master to slave. This command does not disconnect
                the serial port. Use Close() for that effect.
                This effectively tells the acceptor to stop accepting bill but keep reporting status.
                The acceptor's lights will turn off after this call takes effect.
                <seealso cref="M:PyramidNETRS232.PyramidAcceptor.ResumeAcceptance" />
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.ResmeAcceptance">
            <summary>
                Returns the acceptor to bill accepting mode. This command
                has no effect if the acceptor is already running and accepting.
                The acceptor's lights will turn on after this command takes effect.
                The command will take up to Config.PollRate ms to take effect.
                <seealso cref="M:PyramidNETRS232.PyramidAcceptor.PauseAcceptance" />
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.ResumeAcceptance">
            <summary>
                Returns the acceptor to bill accepting mode. This command
                has no effect if the acceptor is already running and accepting.
                The acceptor's lights will turn on after this command takes effect.
                The command will take up to Config.PollRate ms to take effect.
                <seealso cref="M:PyramidNETRS232.PyramidAcceptor.PauseAcceptance" />
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.Connect">
            <summary>
                Connect to the device and begin speaking rs232
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.RequestReset">
            <summary>
                Sets flag to reset the acceptor on the next message sent
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.Reconnect">
            <summary>
                Safely reconnect to the slave device
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.StartRS232Loop">
            <summary>
                Polls the slave and processes messages accordingly
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.ReadAcceptorResp">
            <summary>
                The main parsing routine
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.GenerateNormalMessage">
            <summary>
                Generate the next master message using our given state
            </summary>
            <returns></returns>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.WriteWrapper(System.Byte[])">
            <summary>
                Write data to port and notify client of any errors they should know about.
            </summary>
            <param name="data">byte[]</param>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.ReadWrapper">
            <summary>
                Read data from the port and notify client of any errors they should know about.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.ResetAcceptor">
            <summary>
                Perform a reset on the acceptor. This will not generate a response but the unit
                may go unresponsive for up to 3 seconds.
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.Checksum(System.Collections.Generic.IList{System.Byte})">
            <summary>
                XOR checksum of only the data portion of the message
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.IsBadAckNumber(System.Byte[],System.Byte[])">
            <summary>
                Returns true if the ACK numbers for the given packets do not match
            </summary>
            <param name="resp">byte[] received</param>
            <param name="data">byte[] last message sent</param>
            <returns></returns>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.Stack">
            <summary>
                Issue a stack command to the acceptor. Note that the acceptor must
                be configured to escrow mode and the bill must be in escrow. Otherwise,
                calling this command has no effect other than logging an error message.
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.Reject">
            <summary>
                Issue a reject command to the acceptor. Note that the acceptor must
                be configured to escrow mode and the bill must be in escrow. Otherwise,
                calling this command has no effect other than logging an error message.
            </summary>
        </member>
        <member name="E:PyramidNETRS232.PyramidAcceptor.OnEvent">
            <summary>
                Raised when the acceptor reports any event. Events are transient
                in that they are only reported once to the master.
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.NotifyEvent(PyramidNETRS232.Events)">
            <summary>
                Notify subscribers of event(s). Events may be one or more Events.
            </summary>
            <param name="events"></param>
        </member>
        <member name="E:PyramidNETRS232.PyramidAcceptor.OnStateChanged">
            <summary>
                Raised when the acceptor reports a state that is different from the
                previously recorded state. Note: In escrow mode the Escrowed event
                will be raised as
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.NotifyStateChange(PyramidNETRS232.States)">
            <summary>
                Notify subsribers of state. State may be a transition or the current
                state, repeated.
            </summary>
            <param name="state"></param>
        </member>
        <member name="E:PyramidNETRS232.PyramidAcceptor.OnError">
            <summary>
                Raised by the master in the event that communication fails
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.NotifyError(PyramidNETRS232.Errors)">
            <summary>
                Report errors to the subscriber.
            </summary>
            <param name="errors"></param>
        </member>
        <member name="E:PyramidNETRS232.PyramidAcceptor.OnCredit">
            <summary>
                Raised once a note has been successfully stacked.
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.NotifyCredit(System.Int32)">
            <summary>
                Notify subscriber that credit should be issue.
            </summary>
            <param name="index">Integer value 1-7 indicating which bill should be credited</param>
        </member>
        <member name="E:PyramidNETRS232.PyramidAcceptor.OnEscrow">
            <summary>
                subscribe to this event to be notified of when and what denomination is in escrow.
                If you are running in escrow mode, you may then decide whether to stack or reject
                the note based upon the denomination.
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.NotifyEscrow(System.Int32)">
            <summary>
                Notify subscriber that a note is in escrow.
            </summary>
            <seealso cref="P:PyramidNETRS232.RS232Config.IsEscrowMode" />
            <param name="index">Integer value 1-7 indicating which bill is in escrow</param>
        </member>
        <member name="E:PyramidNETRS232.PyramidAcceptor.OnCashboxAttached">
            <summary>
                Raised when the cashbox is no longer detached. This only be reported if the cashbox is first attached,
                then missing.
            </summary>
        </member>
        <member name="E:PyramidNETRS232.PyramidAcceptor.OnSerialData">
            <summary>
                Subscribe to serial data received and transmission events. Useful for debugging.
            </summary>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.NotifySerialData(PyramidNETRS232.DebugBufferEntry)">
            <summary>
                Notify subsriber that data is available for debugging
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:PyramidNETRS232.PyramidAcceptor.SafeEvent(System.EventHandler)">
            <summary>
                Safely handle event. If handler is null, event is ignored.
            </summary>
            <param name="eventInst">Instance of EventHandler to exectute</param>
        </member>
        <member name="T:PyramidNETRS232.States">
            <summary>
                The bill acceptor will pass through a series of "States" during bill processing. The acceptor will always
                be in one single "State". If the acceptor is waiting for a bill insertion, it will report an "Idle" state
                to the master. If the acceptor is reading a bill, it will report an "Accepting" state to the master. The change
                from one state to another is called a transition.
            </summary>
        </member>
        <member name="F:PyramidNETRS232.States.Offline">
            <summary>
                No slave is currently attached to the master.
            </summary>
        </member>
        <member name="F:PyramidNETRS232.States.Idling">
            <summary>
                Slave reports normal, idle activity. Ready to accept notes.
            </summary>
        </member>
        <member name="F:PyramidNETRS232.States.Accepting">
            <summary>
                Slave reports that it is currently pulling in a note.
            </summary>
        </member>
        <member name="F:PyramidNETRS232.States.Escrowed">
            <summary>
                Slave reports that a note is in the escrow position. This position
                is a physical location inside the acceptor that is too far for the
                customer to pull back but not far enough to that it can't be returned
                if necessary. This state is only report in Escrow Mode.
                <seealso cref="P:PyramidNETRS232.RS232Config.IsEscrowMode" />
            </summary>
        </member>
        <member name="F:PyramidNETRS232.States.Stacking">
            <summary>
                Slave reports that the note is in the process of being stacked.
            </summary>
        </member>
        <member name="F:PyramidNETRS232.States.Returning">
            <summary>
                Slave reports that the note is in the process of being returned.
            </summary>
        </member>
        <member name="F:PyramidNETRS232.States.BillJammed">
            <summary>
                Slave reports that there is a note jam in the feed path that is
                was not able to clear after a reasonable amount of time. This jam
                may be located in the cashbox or the main bottom plate.
            </summary>
        </member>
        <member name="F:PyramidNETRS232.States.StackerFull">
            <summary>
                Slave reports that the cashbox is full and unable to stack anymore notes.
                When this state is reported, the acceptor is considered out of service.
                The front LEDs will be off and no notes can be inserted until the cashbox
                is emptied $$$.
            </summary>
        </member>
        <member name="F:PyramidNETRS232.States.AcceptorFailure">
            <summary>
                Slave reports a failure that is not a jam or cashbox related issue. This
                could include motor failure or EEPROM/Flash memory failure.
            </summary>
        </member>
        <member name="T:PyramidNETRS232.Events">
            <summary>
                Slave acceptor may report a single-shot "Event" taking place. Multiple events
                may be reported in a single message. Events are only reported one time and will
                always accompany a state. If a message is retransmitted, the event will be reported
                a second time but only becuase it was for a retransmission, not because the event
                occured twice. If the slave has just stacked a bill in the cashbox, the slave will
                report a "Stacked" event and since it is now waiting for another bill insertion,
                it will also report an "Idle" state within the same message.
            </summary>
        </member>
        <member name="F:PyramidNETRS232.Events.None">
            <summary>
                No events to report
            </summary>
        </member>
        <member name="F:PyramidNETRS232.Events.Stacked">
            <summary>
                Note has successfully been added to the cashbox
            </summary>
        </member>
        <member name="F:PyramidNETRS232.Events.Returned">
            <summary>
                Note has successfully been returned to the patron
            </summary>
        </member>
        <member name="F:PyramidNETRS232.Events.Cheated">
            <summary>
                Cheat attempt suspected. The Apex 7000 will return a note
                to the patron if a cheat is suspected.
            </summary>
        </member>
        <member name="F:PyramidNETRS232.Events.BillRejected">
            <summary>
                Note was not recognized as valid OR was recognized as valid but
                disabled note.
            </summary>
        </member>
        <member name="F:PyramidNETRS232.Events.PowerUp">
            <summary>
                The slave is powering up while this event is being reported. No
                commands sent by the master to the slave will be acted upon until
                the power up event is over.
            </summary>
        </member>
        <member name="F:PyramidNETRS232.Events.InvalidCommand">
            <summary>
                Slave reports that the last message received from the master was invalid.
            </summary>
        </member>
        <member name="T:PyramidNETRS232.Errors">
            <summary>
                Errors reported by this library
            </summary>
        </member>
        <member name="F:PyramidNETRS232.Errors.None">
            <summary>
                Default error type - nothing is wrong
            </summary>
        </member>
        <member name="F:PyramidNETRS232.Errors.Timeout">
            <summary>
                Timed out reading from slave
            </summary>
        </member>
        <member name="F:PyramidNETRS232.Errors.WriteError">
            <summary>
                Error occured while writing to slave. Possible
                break in serial connection.
            </summary>
        </member>
        <member name="F:PyramidNETRS232.Errors.PortError">
            <summary>
                Unable to open, close, or write to port. May occur
                if USB VCP is suddenly removed.
            </summary>
        </member>
        <member name="F:PyramidNETRS232.Errors.CashboxMissing">
            <summary>
                Cashbox is not detected by slave
            </summary>
        </member>
        <member name="F:PyramidNETRS232.Errors.ChecksumError">
            <summary>
                Message from slave has an incorrect checksum. If you see this
                along with InvalidCommands, it is likely that the serial connection
                is damaged.
            </summary>
        </member>
        <member name="F:PyramidNETRS232.Errors.InvalidCommand">
            <summary>
                The last message received from the slave contains 1 or more invalid messages.
                If you see this along with ChecksumErrors, it is likely that the serial connection
                is damaged.
            </summary>
        </member>
        <member name="F:PyramidNETRS232.Errors.FailedToOpenPort">
            <summary>
                Usually occurs when the target port is already open. May also occur
                on some virtual null modems.
            </summary>
        </member>
        <member name="T:PyramidNETRS232.EscrowCommands">
            <summary>
                Issue these commands while in escrow mode.
            </summary>
        </member>
        <member name="F:PyramidNETRS232.EscrowCommands.None">
            <summary>
                No commands are active or pending
            </summary>
        </member>
        <member name="F:PyramidNETRS232.EscrowCommands.Stack">
            <summary>
                Issues the stack command during the next message loop
            </summary>
        </member>
        <member name="F:PyramidNETRS232.EscrowCommands.Reject">
            <summary>
                Issues the reject command during the next message loop
            </summary>
        </member>
        <member name="F:PyramidNETRS232.EscrowCommands.Notify">
            <summary>
                Escrow message needs to be sent to client
            </summary>
        </member>
        <member name="F:PyramidNETRS232.EscrowCommands.Awaiting">
            <summary>
                Escrow message has been sent to client, awaiting stack or return command
            </summary>
        </member>
        <member name="F:PyramidNETRS232.EscrowCommands.Acknowledged">
            <summary>
                Client has acted on the escrow command, escrow events will be raised on next poll loop
            </summary>
        </member>
        <member name="T:PyramidNETRS232.Request">
            <summary>
                Base message from which all packets are derived
            </summary>
        </member>
        <member name="T:PyramidNETRS232.DebugBufferEntry">
            <summary>
                Helper entry for describing serial communication transactions
            </summary>
        </member>
        <member name="P:PyramidNETRS232.DebugBufferEntry.Data">
            <summary>
                Byte[] data that was transmitted
            </summary>
        </member>
        <member name="P:PyramidNETRS232.DebugBufferEntry.PrintableData">
            <summary>
                Hex formatted byte[] data as 0xHH format
            </summary>
        </member>
        <member name="P:PyramidNETRS232.DebugBufferEntry.Flow">
            <summary>
                Returns Master or Slave
            </summary>
        </member>
        <member name="P:PyramidNETRS232.DebugBufferEntry.Timestamp">
            <summary>
                Retrurns minutes:seconds:milliseconds timestamp relative to epoch
            </summary>
        </member>
        <member name="P:PyramidNETRS232.DebugBufferEntry.RealTime">
            <summary>
                Returns the PC time the packet was collected
            </summary>
        </member>
        <member name="P:PyramidNETRS232.DebugBufferEntry.DecodedData">
            <summary>
                byte[] decoded into known RS-232 messages
            </summary>
        </member>
        <member name="M:PyramidNETRS232.DebugBufferEntry.SetEpoch">
            <summary>
                Sets the timestamp epoch. All timestamps are relative to this value.
            </summary>
        </member>
        <member name="M:PyramidNETRS232.DebugBufferEntry.AsMaster(System.Byte[])">
            <summary>
                Creates a new entry and marks it as being sent master->slave
            </summary>
            <param name="data">byte[]</param>
            <returns>DebugBufferEntry</returns>
        </member>
        <member name="M:PyramidNETRS232.DebugBufferEntry.AsSlave(System.Byte[])">
            <summary>
                Creates a new entry and marks it as being sent slave->master
            </summary>
            <param name="data">byte[]</param>
            <returns>DebugBufferEntry</returns>
        </member>
        <member name="M:PyramidNETRS232.DebugBufferEntry.ToString">
            <summary>
                Returns Flow :: Data :: Timestamp
            </summary>
            <returns></returns>
        </member>
        <member name="M:PyramidNETRS232.DebugBufferEntry.ByteArrayToString(System.Byte[])">
            <summary>
                Convert byte[] to a single-byte hex formatted string
            </summary>
            <param name="ba"></param>
            <returns></returns>
        </member>
        <member name="T:PyramidNETRS232.Flows">
            <summary>
                The origin of this debug entry
            </summary>
        </member>
        <member name="F:PyramidNETRS232.Flows.Master">
            <summary>
                Sent by master
            </summary>
        </member>
        <member name="F:PyramidNETRS232.Flows.Slave">
            <summary>
                Sent by slave
            </summary>
        </member>
        <member name="T:PyramidNETRS232.StateChangedArgs">
            <summary>
                Properties of a state change event
            </summary>
        </member>
        <member name="M:PyramidNETRS232.StateChangedArgs.#ctor(PyramidNETRS232.States)">
            <summary>
                A state changed argument describes the current, single state.
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:PyramidNETRS232.StateChangedArgs.State">
            <summary>
                Most recently reported state of slave
            </summary>
        </member>
        <member name="T:PyramidNETRS232.EventChangedArgs">
            <summary>
                Properties of an event change event
            </summary>
        </member>
        <member name="M:PyramidNETRS232.EventChangedArgs.#ctor(PyramidNETRS232.Events)">
            <summary>
                An event change argument describes an event or multiple events
                simultaneously.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:PyramidNETRS232.EventChangedArgs.Event">
            <summary>
                Most recently reported event or events
            </summary>
        </member>
        <member name="T:PyramidNETRS232.ErrorArgs">
            <summary>
                Properties of an error event
            </summary>
        </member>
        <member name="M:PyramidNETRS232.ErrorArgs.#ctor(PyramidNETRS232.Errors)">
            <summary>
                An error event argument describes why an operation failed
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:PyramidNETRS232.ErrorArgs.Error">
            <summary>
                Error reported by RS-232 library
            </summary>
        </member>
        <member name="T:PyramidNETRS232.CreditArgs">
            <summary>
                Properties of a credit event
            </summary>
        </member>
        <member name="M:PyramidNETRS232.CreditArgs.#ctor(System.Int32)">
            <summary>
                A credit event argument describes a credit event.
            </summary>
            <param name="index">Index of note to credit</param>
        </member>
        <member name="P:PyramidNETRS232.CreditArgs.Index">
            <summary>
                Index of note for which credit should be issues. Index
                is an integer between 1 and 7 inclusive.
                Denomination mapping depends on the Apex 7000 firmware but
                here is the USD map:
                1: $1
                2: $2 (not used)
                3: $5
                4: $10
                5: $20
                6: $50
                7: $100
            </summary>
        </member>
        <member name="T:PyramidNETRS232.EscrowArgs">
            <summary>
                Properties of an escrow event
                <seealso cref="P:PyramidNETRS232.RS232Config.IsEscrowMode" />
            </summary>
        </member>
        <member name="M:PyramidNETRS232.EscrowArgs.#ctor(System.Int32)">
            <summary>
                Escrow event args describe an escrow event.
            </summary>
            <seealso cref="P:PyramidNETRS232.RS232Config.IsEscrowMode" />
            <param name="index">Index of note in escrow</param>
        </member>
        <member name="P:PyramidNETRS232.EscrowArgs.Index">
            <summary>
                Index of note that is in escrow position. Index
                is an integer between 1 and 7 inclusive.
                Denomination mapping depends on the Apex 7000 firmware but
                here is the USD map:
                1: $1
                2: $2 (not used)
                3: $5
                4: $10
                5: $20
                6: $50
                7: $100
                <seealso cref="P:PyramidNETRS232.RS232Config.IsEscrowMode" />
            </summary>
        </member>
        <member name="T:PyramidNETRS232.DebugEntryArgs">
            <summary>
                Properties of a debug entry event
            </summary>
        </member>
        <member name="M:PyramidNETRS232.DebugEntryArgs.#ctor(PyramidNETRS232.DebugBufferEntry)">
            <summary>
                DebugEntry argument describes a debug event
            </summary>
            <param name="entry">DebugBufferEntry describing serial data tx/rx</param>
        </member>
        <member name="P:PyramidNETRS232.DebugEntryArgs.Entry">
            <summary>
                Describes data being debugged. Includes raw byte[] along with
                a translation and some timing information.
            </summary>
        </member>
        <member name="T:PyramidNETRS232.Extensions">
            <summary>
                Add-ons for what is missing from 3.5 .NET
            </summary>
        </member>
        <member name="M:PyramidNETRS232.Extensions.Has``1(System.Enum,``0)">
            <summary>
                Returns true if the provided enum values has the specified flag set.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PyramidNETRS232.Extensions.Is``1(System.Enum,``0)">
            <summary>
                Returns true if the specified enum is equal to the specified value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PyramidNETRS232.Extensions.Add``1(System.Enum,``0)">
            <summary>
                Sets the specified flag on this enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PyramidNETRS232.Extensions.Remove``1(System.Enum,``0)">
            <summary>
                Clears the specified flag on this enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:PyramidNETRS232.MasterCodex">
            <summary>
                \internal
            </summary>
        </member>
        <member name="T:PyramidNETRS232.RS232Config">
            <summary>
                Define the operating parameters of your bill acceptor
            </summary>
        </member>
        <member name="M:PyramidNETRS232.RS232Config.#ctor(System.String)">
            <summary>
                Create a new configuration to use for the Apex7000 validator class. Defaults
                to non-escrow mode.
            </summary>
            <seealso cref="P:PyramidNETRS232.RS232Config.IsEscrowMode" />
            <param name="commPort">String port name e.g. COM4</param>
        </member>
        <member name="M:PyramidNETRS232.RS232Config.#ctor(System.String,System.Boolean)">
            <summary>
                Create a new configuration to use for the Apex7000 validator class.
            </summary>
            <seealso cref="P:PyramidNETRS232.RS232Config.IsEscrowMode" />
            <param name="commPort">String port name e.g. COM4</param>
            <param name="isEscrowMode">bool true to enable escrow mode</param>
        </member>
        <member name="P:PyramidNETRS232.RS232Config.PollRate">
            <summary>
                Gets or sets the poll rate in milliseconds. The polled system is designed for the master to request
                information from the slave at a periodic rate. The rate can be as slow as 5 seconds or as fast as
                50 msec between each poll. The popular rate is fast since the overall system performance
                (bills per minute accepted) will be slower at slower polling rates. While feeding the bill into the
                acceptor, the acceptor will miss a few polls, because it is reading the bill and not servicing the
                serial interface (Typical for acceptors using this protocol).
            </summary>
            <remarks>Default value is 100 ms</remarks>
            <value>Min: 50 Max: 5000</value>
        </member>
        <member name="P:PyramidNETRS232.RS232Config.CommPortName">
            <summary>
                String name of the comm port (What the OS calls it)
            </summary>
        </member>
        <member name="P:PyramidNETRS232.RS232Config.IsEscrowMode">
            <summary>
                Escrow mode allows you to manually call Stack() or Reject() on each
                escrowed note. If false, we stack any valid note automatically.
            </summary>
            <remarks>Default value is false</remarks>
        </member>
        <member name="P:PyramidNETRS232.RS232Config.EscrowTimeoutSeconds">
            <summary>
                Gets or sets the timeout for escrow mode. By default, we wait indefinately but
                you may configure this to a non-zero value to enable escrow timeouts. This has the effect
                of sending a reject message to the acceptor once timeout occurs.
            </summary>
            <remarks>Default value is 0 (disabled)</remarks>
        </member>
        <member name="P:PyramidNETRS232.RS232Config.EnableMask">
            <summary>
                Bitwise enable disbale pattern. Each bit set to 1 corresponds to an enabled bill.
                e.g. 0x7E (0b01111110) is all bill except the $1 are enabled. This value is limited
                to 7-bits (0x7F) and any extra bits will be unset. 0xFF -> 0x7F
            </summary>
            <remarks>Default mask is 0x7F (all enabled)</remarks>
        </member>
        <member name="M:PyramidNETRS232.RS232Config.GetCommPort">
            <summary>
            Create a new comm port using this configuration.
            By default, this library uses the internal StrongPort type.
            If you want to use a different implementation, create a
            class that extends ICommPort and override this class to
            return your type.
            </summary>
            <returns>ICommPort</returns>
        </member>
        <member name="T:PyramidNETRS232.SlaveCodex">
            <summary>
                Used internally to quickly translate between bytes and the string meaning
            </summary>
            \internal
        </member>
        <member name="T:PyramidNETRS232.SlaveCodex.SlaveMessage">
            <summary>
                RS-232 mixed a couple of events in with state
            </summary>
        </member>
        <member name="T:PTI.Serial.ICommPort">
            <summary>
                Defines the contract new implementations of a serial port must adhere to.
            </summary>
        </member>
        <member name="P:PTI.Serial.ICommPort.IsOpen">
            <summary>
                Return true if the underlying serial port is open
            </summary>
        </member>
        <member name="P:PTI.Serial.ICommPort.Name">
            <summary>
                Return the OS name of the underlying port
            </summary>
        </member>
        <member name="P:PTI.Serial.ICommPort.ReadTimeout">
            <summary>
                Gets or Sets the timeout in milliseconds for a read operation.
            </summary>
        </member>
        <member name="M:PTI.Serial.ICommPort.Connect">
            <summary>
                Attempts to open the underlying serial port using the currently
                configured state. Returns true if port is successfully opened.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:PTI.Serial.ICommPort.Disconnect">
            <summary>
                Attempts to safely close the underling serial port and base stream.
                If the close operation completes without issue, bool true is returned.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:PTI.Serial.ICommPort.Write(System.Byte[])">
            <summary>
                Writes the byte[] data to this port. If the port is not open, misconfigured,
                or if there is a physical connection issue, exceptions may arise.
            </summary>
            <param name="data">byte[]</param>
        </member>
        <member name="M:PTI.Serial.ICommPort.Read">
            <summary>
                Reads all available data from this port. If no data is received withint
                ReadTimeout milliseconds, a timeout exception will be raised.
            </summary>
            <returns>byte[]</returns>
        </member>
        <member name="T:PTI.Serial.ExceptionTypes">
            \internal
        </member>
        <member name="T:PTI.Serial.PortException">
            \internal
        </member>
        <member name="T:PTI.Serial.SerialPortFixer">
            \internal
        </member>
        <member name="M:PTI.Serial.StrongPort.#ctor(System.String)">
            <summary>
                Creates a new strong port by correctly configuring the DCB blocks used to configured
                the comm port in the Win32 API. As such, this call requires unrestricted access to the system
                e.g. run as admin. If you do not run this application as admin, this call will fail with a
                security excetion
            </summary>
            <param name="portName">OS name of port to open. e.g. COM4</param>
            <exception cref="T:System.Security.SecurityException">Thrown if executing user does not have unrestricted access</exception>
        </member>
        <member name="M:PTI.Serial.StrongPort.Dispose">
            <summary>
                Releases comm port and related managed resources.
            </summary>
        </member>
        <member name="M:PTI.Serial.StrongPort.Dispose(System.Boolean)">
            <summary>
                Releases comm port and related managed resources.
            </summary>
        </member>
        <member name="M:PTI.Serial.StrongPort.SafeDisconnect(System.IO.Ports.SerialPort,System.IO.Stream)">
            <summary>
                Safely closes a serial port and its internal stream even if
                a USB serial interface was physically removed from the system
                in a reliable manner.
            </summary>
            <param name="port"></param>
            <param name="internalSerialStream"></param>
            <remarks>
                The <see cref="T:System.IO.Ports.SerialPort" /> class has 3 different problems in disposal
                in case of a USB serial device that is physically removed:
                1. The eventLoopRunner is asked to stop and <see cref="P:System.IO.Ports.SerialPort.IsOpen" />
                returns false. Upon disposal this property is checked and closing
                the internal serial stream is skipped, thus keeping the original
                handle open indefinitely (until the finalizer runs which leads to the next problem)
                The solution for this one is to manually close the internal serial stream.
                We can get its reference by <see cref="P:System.IO.Ports.SerialPort.BaseStream" />
                before the exception has happened or by reflection and getting the
                "internalSerialStream" field.
                2. Closing the internal serial stream throws an exception and closes
                the internal handle without waiting for its eventLoopRunner thread to finish,
                causing an uncatchable ObjectDisposedException from it later on when the finalizer
                runs (which oddly avoids throwing the exception but still fails to wait for
                the eventLoopRunner).
                The solution is to manually ask the event loop runner thread to shutdown
                (via reflection) and waiting for it before closing the internal serial stream.
                3. Since Dispose throws exceptions, the finalizer is not suppressed.
                The solution is to suppress their finalizers at the beginning.
            </remarks>
        </member>
        <member name="M:PTI.Serial.StrongPort.GetAvailablePorts">
            <summary>
                Return a list of all available serial ports that the OS can connect upon
            </summary>
            <returns></returns>
        </member>
        <member name="P:PTI.Serial.StrongPort.IsOpen">
            <summary>
                Returns true if this port is open
            </summary>
        </member>
        <member name="P:PTI.Serial.StrongPort.Name">
            <summary>
                Returns the OS name for the serial port
            </summary>
        </member>
        <member name="P:PTI.Serial.StrongPort.ReadTimeout">
            <summary>
                Set the read timeout for the underlying serial port. Any read executed on this port
                that does not receive data before this timeout will cause a SerialPortTimeout exception.
            </summary>
        </member>
        <member name="M:PTI.Serial.StrongPort.Connect">
            <summary>
                This class of port gets opened on instantiation
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:PTI.Serial.StrongPort.Disconnect">
            <summary>
                Attempts to safely close the underling serial port and base stream.
                If the close operation completes without issue, bool true is returned.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:PTI.Serial.StrongPort.Write(System.Byte[])">
            <summary>
                Writes the byte[] data to this port. If the port is not open, misconfigured,
                or if there is a physical connection issue, exceptions may arise.
            </summary>
            <param name="data">byte[]</param>
        </member>
        <member name="M:PTI.Serial.StrongPort.Read">
            <summary>
                Reads all available data from this port. If no data is received withint
                ReadTimeout milliseconds, a timeout exception will be raised.
            </summary>
            <returns>byte[]</returns>
        </member>
    </members>
</doc>
